CSE 331 Homework 4.  Answers to Written questions.
Edit this file to supply your answers.

Name:  <Fentahun Reta>

Problem 0.

(a)
 To get the product of two polynomial (r = p * q):
  // degrees to keep track the degree of term p and q 
  set d_p = 0   
  set d_q = 0 
  // coefficients to keep track the coefficient of term p and q    
  set c_p = 0   
  se  c_q = 0  
  set r = 0    //a zero polynomial that hold the product of p and q
  for each term, t_p, in p:
     set d_p = degree of t_p
	 set c_p = coefficient of p
    
     for each term, t_q, in q: 
       set d_q = degree of t_q
	   set c_q = coefficient of q
       if any term, t_r, in r has the same degree as d_p + d_q,
         then replace t_r in r with the sum of t_r and (c_p * c_q) with degree (d_p + d_q) 
       else insert a new term with coefficient c_p * c_q and degree (d_p + d_q) into r
        advance to the next q term
      dvance to the next p term
  
 // OR we can call the polynomial addition method if we assume the
 // method is already implementd in our class. 
poly r = 0 set a zero polynomial that hold the product of p and q
set d_r = 0
set c_r = 0
for each term, t_p, with coefficient, c_p, and degree, d_p, in p:
   for each term, t_q, (coefficient c_q, degree d_q) in q:
       set d_temp = d_q + d_r
	   set c_temp = c_q * c_r 
	   poly temp  =  a term with degree(d_q + d_r) and coefficient (c_q * c_r)
       r = PolyAddition (r, temp)  //call polynomial addition method
return r;

(b) pseudocode algorithm for division:
 q = u / v:
  set q = 0 // zero polynomial
  set r = u by making a term-by-term copy of all terms in u to r // at each step u = q*v + r
  while r != 0 and highest degree of (r) >= highest degree of (v): 
    set c = coefficient of lead(r)/ coefficient of lead(v)    // Divide the coefficient of leading terms of r by leading term v.  
    set d = highest degree of (r) - highest degree of (v) 
    set temp = a polynomial that has a term with coefficient(c) and degree (d)
    set q = q + temp
    set r = r - (v * temp)
	
Note that if initially the highest degree of(u) < degree(v); in that case the 
result is just the trivial one (0, v).
==> u = q*v + r = u because q is initially zero. 


(c)
suppose u =x^3+x-1   v =x+1
we want to calculate q = u / v:
(x^3 + x -1) / (x + 1) = x^2 -x+2

u = x^3+x-1
v = x+1
q = 0 // zero polynomial
r = x^3+x-1   // by making a term-by-term copy of all terms in u to r 
while r!= 0 and highest degree of (r) >= highest degree of (v)
   [r != 0 and highest degree of (r) >= highest degree of (v)] YES, 3 > 1
  Iteration 1: [ r = x^3+x-1, q = 0, and v = x+1]
    [set c = coefficient of leading term (r)/ coefficient of leading term(v)], c = 1/1 = 1
    [set d = highest degree of (r) - highest degree of (v)], d = 3 - 1 = 2
    [set temp = a polynomial that has a term with coefficient(c) and degree (d)], temp = x^2 
    [set q = q + temp], q = 0 + x^2 = x^2
    [set r = r - (v*temp)], r = x^3 + x - 1 -[(x+1)*x^2] = x^3 +x-1 -(x^3 + x^2) = -x^2 +x-1
   [r != 0 and highest degree of (r) >= highest degree of (v)] YES, 2 > 1
   
  Iteration 2: [ r = -x^2+x-1, q = x^2, and v = x+1]
    [set c = coefficient of leading term(r)/ coefficient of leading term(v)], c= -1/1 = -1
    [set d = highest degree of (r) - highest degree of (v)], d = 2 - 1 = 1
    [set temp = a polynomial that has a term with coefficient(c) and degree (d)], temp = -x
    [set q = q + temp], q = x^2 + (-x) = x^2 -x
    [set r = r - (v*temp)], r = -x^2+x-1 - [(x+1)*(-x)] = -x^2 +x -1 - (-x^2 -x) = 2*x-1
   [r!= 0 and highest degree of (r) >= highest degree of (v)] YES, 1 >= 1
   
  Iteration 3: [ r = 2*x -1, q = x^2 -x, and v = x+1]
    [set c = coefficient of leading term(r)/ coefficient of leading term(v)], c = 2
    [set d = highest degree of (r) - highest degree of (v)],  d = 1 - 1 = 0
    [set temp = a polynomial that has a term with coefficient(c) and degree (d)], temp = 2x^0 = 2 
    [set q = q + temp], q = x^2 -x + 2 = x^2 -x+2
    [set r = r - (v*temp)], r = 2*x-1 - (2 * x+1) = 2*x-1 -(2*x+2) = -3
  [r!= 0 and highest degree of (r) >= highest degree of (v)] NO, (0 >=1) ==> not true
we are done! u = q*v + r,  q = x^2-x+2 and r = -3

so, u = q*v + r
      = x^3 + x -1 = q*v + r
				   = [(x^2-x+2)*(x+1)] + (-3)
				   = (x^3 -x^2 + 2x + x^2 -x + 2) + (-3)
				   = x^3 +x +2 + (-3)
				   = x^3 + x-1


Problem 1.

(a)
 The method/constructor implementations that would have to change are: The constructor with two parameters, equals, toString, and hashCode methods. Thus, 
 in order to satisfy the new Rep invariant, the construct does not need to use gcd. On the other hand, equals, hashCode, and toString methods should
 to use gcd. Since gcd method has loop, it will improve the efficiency of the constructor, and make less efficeint and more complex the other methods. 


(b)
 Based on the specification, both methods(add, sub, mul and div) return new RatNum without modification of the object. Because there are no 
 @modifies clause in the specification. However, in the new implementations, all methods will fail to meet the specification requirment because
 they are mutating the object.It will also violate the class specifications because the class specification stated that RatNum is an immutable rational number. 

(c)
 Firstly, the instances of RatNum are declared as final. Thus, it cannot be changed once it is intitialzed. Secondly,  all the methods in this class are not mutator
 or they cannot modified or change the original parameter object's, instead they return a new object. Thus, as long as constructor meet the rep invariant nothing will
 be affected by calling checkRep at the end. Therefore, calling checkRep at the end of the constructors is sufficient to catch the violations of the representation invariants.

Problem 2.

(a)
 At the end of the constructors because the instance variables are declared as fianl and there is no mutator methods in the class.
 All methods are return a new object without any modification of the original objects. Therefore, it is sufficient to include 
 checkRep at the end of the constructor to satisfy the invariant representaion of the class. 

(b)
 The implementations of isZero and toString method will have to change, and the constructor will to check zero coefficients. Thus, toString method should 
 check and handle zero coefficient case before append zero to the ouput if there is zero coefficient before checking degrees. This makes the code more 
 complex interms of clarity and might affected execution efficiency.

(c)
  The construct will be to chnaged, and it will have some case when NaN is passed as argument.However, I prefer to have both rep invariants because it
  can give more flexibilty to handle the operation condition in (add, sub, mul, and div). So, that it can simplified the operatin for terms with zero
  and NaN coefficcinets because in both case the degree is zero.

Problem 5. 
   x^3 + 10x^2 + 9x -9
   x^2 + 5x + 6
   x^2
   2x + 1